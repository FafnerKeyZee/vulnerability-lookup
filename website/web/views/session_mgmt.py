#!/usr/bin/env python3

import sqlalchemy
from datetime import datetime
from flask import current_app
from flask import flash
from flask import render_template
from flask import redirect
from flask import request
from flask import session
from flask import url_for
from flask_login import current_user  # type: ignore[import-untyped]
from flask_login import LoginManager
from flask_login import login_required
from flask_login import logout_user
from flask_principal import AnonymousIdentity
from flask_principal import identity_changed
from flask_principal import identity_loaded
from flask_principal import Principal  # type: ignore[import-untyped]
from flask_principal import session_identity_loader
from flask_principal import UserNeed
from werkzeug import Response as WerkzeugResponse

from website.web.permissions import admin_role
from website.web.permissions import commenter_role
from website.web.permissions import reporter_role
from website.web.permissions import login_user_bundle

from website.models import User
from website.notifications import notifications
from website.web.bootstrap import application
from website.web.bootstrap import db
from website.web.forms import LoginForm
from website.web.forms import SignupForm
from website.web.views.user import user_bp

Principal(current_app)
# Create a permission with a single Need, in this case a RoleNeed.

login_manager = LoginManager()
login_manager.init_app(current_app)
login_manager.login_view = "login"
login_manager.login_message = "Please log in to access this page."
login_manager.login_message_category = "info"


@identity_loaded.connect_via(current_app._get_current_object())  # type: ignore
def on_identity_loaded(sender, identity) -> None:
    # Set the identity user object
    identity.user = current_user

    # Add the UserNeed to the identity
    if current_user.is_authenticated:
        identity.provides.add(UserNeed(current_user.id))
        if current_user.is_admin:
            identity.provides.add(admin_role)
        if current_user.is_commenter:
            identity.provides.add(commenter_role)
        if current_user.is_reporter:
            identity.provides.add(reporter_role)
            identity.provides.add(commenter_role)


@login_manager.user_loader
def load_user(user_id: int) -> bool:
    return User.query.filter(User.id == user_id, User.is_active == True).first()  # noqa


@current_app.before_request
def before_request() -> None:
    if current_user.is_authenticated:
        current_user.last_seen = datetime.now()
        db.session.commit()


@user_bp.route("/login", methods=["GET", "POST"])
def login() -> WerkzeugResponse:
    if current_user.is_authenticated:
        return redirect(url_for("user_bp.form"))
    form = LoginForm()
    if request.method == "POST" and form.validate():
        login_user_bundle(form.user)
        return redirect(form.redirect_target or url_for("user_bp.profile"))
    return render_template("user/login.html", form=form)


@user_bp.route("/logout")
@login_required
def logout() -> WerkzeugResponse:
    # Remove the user information from the session
    logout_user()

    # Remove session keys set by Flask-Principal
    for key in ("identity.name", "identity.auth_type"):
        session.pop(key, None)

    # Tell Flask-Principal the user is anonymous
    identity_changed.send(current_app, identity=AnonymousIdentity())
    session_identity_loader()

    return redirect(url_for("user_bp.login"))


@user_bp.route("/signup", methods=["GET", "POST"])
def signup() -> str | WerkzeugResponse:
    if not application.config["SELF_REGISTRATION"]:
        flash("Self-registration is disabled.", "warning")
        return redirect(url_for("home_bp.search"))
    if current_user.is_authenticated:
        return redirect(url_for("user_bp.form"))

    form = SignupForm()
    # if form.validate_on_submit():
    if request.method == "POST" and form.validate():
        try:
            new_user = User(
                login=form.login.data,
                email=form.email.data,
                pwdhash="",
                is_active=False,
                is_admin=False,
            )
            db.session.add(new_user)
            db.session.commit()
        except sqlalchemy.exc.IntegrityError:
            db.session.rollback()

        # Send the confirmation email
        try:
            notifications.confirm_account(new_user)
        except Exception as error:
            flash(f"Problem while sending activation email: {error}",
                "danger",
            )

        flash(
            "Your account has been created. Check your mail to confirm it.",
            "success",
        )

        return redirect(url_for("home_bp.search"))

    return render_template("user/signup.html", form=form)
