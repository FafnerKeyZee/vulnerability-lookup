#!/usr/bin/env python3

from typing import Any

import glob
import importlib.util
import sys
from os.path import dirname, basename, isfile, join

import jsonschema  # type: ignore[import-untyped]


def load_module(source: str, module_name: str = ""):
    """
    Reads file source and loads it as a module.

    :param source: file to load
    :param module_name: name of module to register in sys.modules
    :return: loaded module
    """
    spec = importlib.util.spec_from_file_location(module_name, source)
    module = importlib.util.module_from_spec(spec)
    sys.modules[module_name] = module
    spec.loader.exec_module(module)
    return module


modules = glob.glob(join(dirname(__file__), "*.py"))

# Loads the validators for the different SA sources found in the local directory
validators = {
    basename(f)[:-3]: getattr(load_module(f), "validator", None)
    for f in modules
    if isfile(f) and not f.endswith("__init__.py")
}
# Filters keys with None as value
validators = dict(filter(lambda item: item[1] is not None, validators.items()))


def validate_json(data: Any, format: str = "circl") -> None:
    """Checks the format of a JSON object against a JSON schema."""
    try:
        validators[format].validate(data)
    except jsonschema.exceptions.ValidationError:
        for error in sorted(validators[format].iter_errors(data), key=lambda e: e.path):
            print("Record did not pass validation:")
            print(str(error.message))
        raise
    except Exception:
        raise
