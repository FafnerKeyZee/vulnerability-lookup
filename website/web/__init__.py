#!/usr/bin/env python3

from importlib.metadata import version
from typing import Optional

from flask import Flask
from flask_restx import Api, Resource  # type: ignore

from vulnerabilitylookup.vulnerabilitylookup import VulnerabilityLookup

from .helpers import get_secret_key
from .proxied import ReverseProxied

app: Flask = Flask(__name__)

app.wsgi_app = ReverseProxied(app.wsgi_app)  # type: ignore

app.config['SECRET_KEY'] = get_secret_key()

api = Api(app, title='VulnerabilityLookup API',
          description='API to query VulnerabilityLookup.',
          version=version('vulnerabilitylookup'))

vulnerabilitylookup: VulnerabilityLookup = VulnerabilityLookup()


@api.route('/redis_up')
@api.doc(description='Check if redis is up and running')
class RedisUp(Resource):

    def get(self):
        return vulnerabilitylookup.check_redis_up()


@api.route('/api/cve/<string:vulnerability_id>')
@api.route('/vulnerability/<string:vulnerability_id>')
@api.doc(description='Get a vulnerability')
class Vulnerability(Resource):

    def get(self, vulnerability_id: str):
        return vulnerabilitylookup.get_vulnerability(vulnerability_id)


@api.route('/api/dbInfo')
@api.route('/info')
@api.doc(description='Get more information about the current databases in use and when it was updated')
class Info(Resource):

    def get(self):
        return vulnerabilitylookup.get_info()


@api.route('/api/last')
@api.route('/last')
@api.route('/last/<int:number>')
@api.route('/last/<string:source>')
@api.route('/last/<string:source>/<int:number>')
@api.doc(description='Get the last CVEs')
class Last(Resource):

    def get(self, source: Optional[str]=None, number: Optional[int]=30):
        return vulnerabilitylookup.get_last(source, number)


@api.route('/api/browse')
@api.doc(description='Get the known vendors')
class Vendors(Resource):

    def get(self):
        return list(vulnerabilitylookup.get_vendors())


@api.route('/api/browse/<string:vendor>')
@api.doc(description='Get the known products for a vendor')
class VendorProducts(Resource):

    def get(self, vendor: str):
        return list(vulnerabilitylookup.get_vendor_products(vendor))


@api.route('/api/search/<string:vendor>/<string:product>')
@api.doc(description='Get the the vulnerabilities per vendor and a specific product')
class VendorProductVulnerabilities(Resource):

    def get(self, vendor: str, product: str):
        return vulnerabilitylookup.get_vendor_product_vulnerabilities(vendor, product)
