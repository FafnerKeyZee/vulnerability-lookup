from typing import Any
from typing import Dict
from typing import Tuple

import logging
from flask_restx import abort  # type: ignore[import-untyped]
from flask_restx import Namespace
from flask_restx import reqparse
from flask_restx import Resource

from website.web.bootstrap import db
from website.validators import validate_json
from website.web.api.v1.common import auth_func
from website.models.comment import Comment
from website.web.permissions import admin_permission, commenter_permission

logger = logging.getLogger(__name__)

comment_ns = Namespace("comment", description="comment related operations")

# Argument Parsing
parser = reqparse.RequestParser()
parser.add_argument("vuln_id", type=str, help="ID of the vulnerability.")


@comment_ns.route("/comment/<string:comment_id>")
class CommentItem(Resource):  # type: ignore[misc]
    @comment_ns.doc(description="Get a comment.")  # type: ignore[misc]
    def get(self, comment_id: str) -> Tuple[dict[str, str], int]:
        return {"result": "OK"}, 200

    @comment_ns.doc(description="Delete a cooment.")  # type: ignore[misc]
    @admin_permission.require(http_exception=403)  # type: ignore[misc]
    @auth_func
    def delete(self, comment_id: str) -> Tuple[dict[Any, Any], int]:
        """Endpoint for deleting a comment."""
        return {}, 204


@comment_ns.route("/comment/")
class CommentsList(Resource):  # type: ignore[misc]
    @comment_ns.doc("list_comments")  # type: ignore[misc]
    @comment_ns.expect(parser)  # type: ignore[misc]
    def get(self) -> Tuple[Dict[Any, Any], int]:
        """List all comments."""
        args = parser.parse_args()
        vuln_id = args.pop("vuln_id", None)

        result: Dict[str, str] = {"result": "OK"}
        return result, 200

    @comment_ns.doc(description="Create a comment related to a security advisory.")  # type: ignore[misc]
    @comment_ns.doc(
        responses={
            200: "Success.",
            400: "JSON validation failed.",
            403: "Commenter permission required.",
        }
    )  # type: ignore[misc]
    @commenter_permission.require(http_exception=403)  # type: ignore[misc]
    @auth_func
    def post(self) -> Tuple[Dict[Any, Any], int]:
        """Create a new comment related to a security advisory (vulnerability)."""
        # Validate the JSON payloadi
        comment = comment_ns.payload["json_object"]
        try:
            validate_json(comment, "circl_comment")
        except Exception:
            logger.warning("JSON validation failed.")
            abort(400, "JSON validation failed.")

        print(comment)

        # new_comment = Comment(
        #     vuln_id = vuln_id,
        #     data=comment,
        #     is_published=False,
        # )
        # db.session.add(new_comment)
        # db.session.commit()

        return comment, 200
