#!/usr/bin/env python3

import sqlalchemy
from datetime import datetime
from flask import current_app
from flask_login import current_user  # type: ignore[import-untyped]
from flask_login import LoginManager
from flask_principal import Principal  # type: ignore[import-untyped]
from flask_principal import UserNeed

from website.web.permissions import admin_role
from website.web.permissions import login_user_bundle

from website.web.bootstrap import db
from website.models import User

Principal(current_app)
# Create a permission with a single Need, in this case a RoleNeed.

login_manager = LoginManager()
login_manager.init_app(current_app)
login_manager.login_view = "login"
login_manager.login_message = "Please log in to access this page."
login_manager.login_message_category = "info"


@identity_loaded.connect_via(current_app._get_current_object())  # type: ignore
def on_identity_loaded(sender, identity):
    # Set the identity user object
    identity.user = current_user

    # Add the UserNeed to the identity
    if current_user.is_authenticated:
        identity.provides.add(UserNeed(current_user.id))
        if current_user.is_admin:
            identity.provides.add(admin_role)
        # if current_user.is_api:
        #     identity.provides.add(api_role)


@login_manager.user_loader
def load_user(user_id: int) -> bool:
    return User.query.filter(User.id == user_id, User.is_active == True).first()  # noqa


@current_app.before_request
def before_request() -> None:
    if current_user.is_authenticated:
        current_user.last_seen = datetime.now()
        db.session.commit()
