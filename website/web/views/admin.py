#!/usr/bin/env python3

from flask import Blueprint
from flask import flash
from flask import redirect
from flask import render_template
from flask import url_for
from flask_login import current_user  # type: ignore[import-untyped]
from flask_login import login_required
from flask_paginate import get_page_args  # type: ignore[import-untyped]
from flask_paginate import Pagination
from werkzeug import Response as WerkzeugResponse
from werkzeug.security import generate_password_hash

from website.models import User, Comment
from website.web.bootstrap import db
from website.web.forms import UserForm
from website.web.permissions import admin_permission

admin_bp = Blueprint("admin_bp", __name__, url_prefix="/admin")


#
# Users
#


@admin_bp.route("/users", defaults={"per_page": "10"}, methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def list_users(per_page: int) -> str:
    users = User.query.filter().order_by(User.last_seen.desc())
    page, per_page, offset = get_page_args(
        page_parameter="page", per_page_parameter="per_page"
    )
    pagination = Pagination(
        page_parameter="page",
        page=page,
        per_page=per_page,
        total=users.count(),
        css_framework="bootstrap5",
        search=False,
    )
    users = users.offset(offset).limit(per_page)
    return render_template("admin/users.html", users=users, pagination=pagination)


@admin_bp.route("/user/create", methods=["GET"])
@admin_bp.route("/user/edit/<int:user_id>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def form_user(user_id: int = 0) -> str:
    """Return a form to create and edit a user."""
    action = "Add a user"
    head_titles = [action]
    form = UserForm()
    if user_id == 0:
        return render_template(
            "admin/edit_user.html", action=action, head_titles=head_titles, form=form
        )

    user = User.query.filter(User.id == user_id).first()
    form = UserForm(obj=user)
    action = f"Edit user {user.login}"
    head_titles = [action]
    head_titles.append(user.login)
    return render_template(
        "admin/edit_user.html",
        action=action,
        head_titles=head_titles,
        form=form,
        user=user,
    )


@admin_bp.route("/user/create", methods=["POST"])
@admin_bp.route("/user/edit/<int:user_id>", methods=["POST"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def process_user_form(user_id: int = 0) -> str | WerkzeugResponse:
    """Edit a user."""
    form = UserForm()

    if not form.validate():
        return render_template("admin/edit_user.html", form=form)

    if user_id != 0:
        user = User.query.filter(User.id == user_id).first()
        form.populate_obj(user)
        if form.password.data:
            user.pwdhash = generate_password_hash(form.password.data)
        db.session.commit()
        flash(
            f"User {form.login.data} successfully updated.",
            "success",
        )
        return redirect(url_for("admin_bp.form_user", user_id=user.id))

    # Create a new user
    new_user = User(
        login=form.login.data,
        email=form.email.data,
        name=form.name.data,
        organisation=form.organisation.data,
        is_active=form.is_active.data,
        is_confirmed=form.is_confirmed.data,
        is_admin=form.is_admin.data,
        pwdhash=generate_password_hash(form.password.data),
    )
    db.session.add(new_user)
    db.session.commit()
    flash(
        f"User {new_user.login} successfully created.",
        "success",
    )
    return redirect(url_for("admin_bp.form_user", user_id=new_user.id))


@admin_bp.route("/user/toggle/<int:user_id>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def toggle_user(user_id: int) -> WerkzeugResponse:
    """Activate/deactivate a user."""
    user = User.query.filter(User.id == user_id).first()
    if user.id == current_user.id:
        flash("You can not do this change to your own user.", "danger")
    else:
        user.is_active = not user.is_active
        db.session.commit()
        flash(
            "User {status}.".format(
                status="activated" if user.is_active else "deactivated"
            ),
            "success",
        )
    return redirect(url_for("admin_bp.list_users"))


@admin_bp.route("/user/reset-2fa/<int:user_id>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def reset_two_factor_auth(user_id: int) -> WerkzeugResponse:
    """Reset two factor authentication for a user."""
    user = User.query.filter(User.id == user_id).first()
    if user.id == current_user.id:
        flash("You can not do this change to your own user.", "danger")
    else:
        user.is_two_factor_authentication_enabled = False
        user.secret_token = None
        db.session.commit()
        flash("Two-Factor Authentication resetted.", "success")
    return redirect(url_for("admin_bp.list_users"))


@admin_bp.route("/user/delete/<int:user_id>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def delete_user(user_id: int) -> WerkzeugResponse:
    """Delete a user."""
    user = User.query.filter(User.id == user_id).first()
    if user.id == current_user.id:
        flash("You can not delete your own user.", "danger")
    else:
        db.session.delete(user)
        db.session.commit()
        flash("User deleted.", "success")
    return redirect(url_for("admin_bp.list_users"))


#
# Comments
#


@admin_bp.route("/comments", defaults={"per_page": "10"}, methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def list_comments(per_page: int) -> str:
    comments = Comment.query.filter().order_by(Comment.timestamp.desc())
    page, per_page, offset = get_page_args(
        page_parameter="page", per_page_parameter="per_page"
    )
    pagination = Pagination(
        page_parameter="page",
        page=page,
        per_page=per_page,
        total=comments.count(),
        css_framework="bootstrap5",
        search=False,
    )
    comments = comments.offset(offset).limit(per_page)
    return render_template(
        "admin/comments.html", comments=comments, pagination=pagination
    )


@admin_bp.route("/comment/toggle/<string:comment_uuid>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def toggle_comment(comment_uuid: str) -> WerkzeugResponse:
    """Activate/deactivate a comment."""
    comment = Comment.query.filter(Comment.uuid == comment_uuid).first()
    comment.is_published = not comment.is_published
    db.session.commit()
    flash(
        "Comment {status}.".format(
            status="published" if comment.is_published else "unpublished"
        ),
        "success",
    )
    return redirect(url_for("admin_bp.list_comments"))


@admin_bp.route("/comment/delete/string:comment_uuid>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def delete_comment(comment_uuid: str) -> WerkzeugResponse:
    """Delete a comment."""
    comment = Comment.query.filter(Comment.uuid == comment_uuid).first()
    db.session.delete(comment)
    db.session.commit()
    flash("Comment deleted.", "success")
    return redirect(url_for("admin_bp.list_comments"))
