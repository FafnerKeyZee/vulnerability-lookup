import json
import logging
import requests

from datetime import datetime, timedelta
from redis import Redis
from typing import Optional, Dict, Union

from ..default import get_config, get_homedir, safe_create_dir
from ..helpers import get_config_feeder


class NVDFetcher():
    def __init__(self):
        self.logger = logging.getLogger(f'{self.__class__.__name__}')
        self.config = get_config_feeder('nvd')
        if 'apikey' in self.config:
            self.url_apikey_param = {"apiKey": self.config['apikey']}
        else:
            self.url_apikey_param = {}

        if 'level' in self.config:
            self.logger.setLevel(self.config['level'])
        else:
            self.logger.setLevel(get_config('generic', 'loglevel'))

        self.storage = Redis(host=get_config('generic', 'storage_db_hostname'),
                             port=get_config('generic', 'storage_db_port'))

        self.url_api = "https://services.nvd.nist.gov/rest/json/cves/2.0/?"
        self.output_dir = get_homedir() / get_config('generic', 'output_dir') / 'cves'
        safe_create_dir(self.output_dir)

    def nvd_update(self) -> bool:
        query: Dict[str, Union[int, str]]
        last_update: Optional[datetime]
        if _last_update_str := self.storage.hget('last_updates', 'nvd'):
            last_update = datetime.fromisoformat(_last_update_str.decode())
        else:
            last_update = None
        if last_update is None:
            # Assuming the first CVE allocation is in 1999
            # LastUpdate = datetime.datetime(1999, 1, 1)
            query = {}
        else:
            query = {'lastModStartDate': (last_update - timedelta(days=1)).isoformat(),
                     'lastModEndDate': (datetime.now() - timedelta(seconds=10)).isoformat()
                     }

        last_update = datetime.now()
        self.logger.debug(f'nvd_query: {query}')

        index = 0
        totalResults = None
        results_per_page = None
        max_results_per_page = 500
        while True:
            query['startIndex'] = index
            query['resultsPerPage'] = max_results_per_page
            r = requests.get(self.url_api, params=query, headers=self.url_apikey_param)
            r.raise_for_status()
            nvd_value = r.json()
            if totalResults is None:
                totalResults = nvd_value["totalResults"]
                self.logger.debug(totalResults)
            results_per_page = len(nvd_value['vulnerabilities'])
            if not results_per_page:
                # No more CVEs
                break
            self.logger.debug(f"index:{index} totalResults:{totalResults}")
            index += results_per_page
            # Store all cves individually
            p = self.storage.pipeline()
            cves = set()
            for vuln in nvd_value['vulnerabilities']:
                p.set(vuln['cve']['id'], json.dumps(vuln))
                cves.add(vuln['cve']['id'])
            p.sadd('index:nvd', *cves)
            p.execute()
            if results_per_page < max_results_per_page:
                break
        self.storage.hset('last_updates', mapping={'nvd': last_update.isoformat()})
        return True
