from typing import Any
from typing import Dict
from typing import Tuple
from datetime import datetime

import orjson
from flask_login import current_user  # type: ignore[import-untyped]
from flask import request
from flask_restx import abort  # type: ignore[import-untyped]
from flask_restx import Namespace
from flask_restx import Resource
from redis import Redis

from vulnerabilitylookup.default import get_config
from vulnerabilitylookup.helpers import fromisoformat_wrapper
from website.lib.utils import validate_json
from website.web.api.v1.common import auth_func
from website.web.bootstrap import vulnerabilitylookup
from website.web.permissions import reporter_permission

api_ns = Namespace("api", description="core API operations")
default_ns = Namespace("default", description="default operations")


@api_ns.route("/cve/<string:vulnerability_id>")
@default_ns.route("vulnerability/<string:vulnerability_id>")
class Vulnerability(Resource):  # type: ignore[misc]
    @api_ns.doc(description="Get a vulnerability.")  # type: ignore[misc]
    @default_ns.doc(description="Get a vulnerability.")  # type: ignore[misc]
    def get(self, vulnerability_id: str) -> dict[str, Any] | None:
        with_meta = True if request.args.get("with_meta") else False
        return vulnerabilitylookup.get_vulnerability(
            vulnerability_id, with_meta=with_meta
        )


@api_ns.route("/cve/")
@default_ns.route("vulnerability/")
class VulnerabilitiesList(Resource):  # type: ignore[misc]
    @api_ns.doc(description="Create a vulnerability with the CVE version 5 format.")  # type: ignore[misc]
    @default_ns.doc(description="Create a vulnerability with the CVE version 5 format.")  # type: ignore[misc]
    @reporter_permission.require(http_exception=403)  # type: ignore[misc]
    @auth_func
    def post(self) -> Tuple[Dict[Any, Any], int]:
        """Endpoit for creating and editing vulnerabilities in the CIRCL local source to the CVE version 5 format."""
        ids: dict[str, float] = {}
        storage = Redis(
            host=get_config("generic", "storage_db_hostname"),
            port=get_config("generic", "storage_db_port"),
        )

        vuln = default_ns.payload

        # Validate the JSON
        try:
            validate_json(vuln)
        except Exception:
            abort(400, "JSON validation failed.")

        vuln_id = vuln["cveMetadata"]["cveId"].lower()

        source = vulnerabilitylookup.get_vulnerability_source(vuln_id) or "circl"
        if source != "circl":
            abort(
                400,
                "You can not edit a vulnerability fron the source {}. You must change the CVE ID.".format(
                    source
                ),
            )

        if "dateUpdated" in vuln["cveMetadata"]:
            updated = fromisoformat_wrapper(vuln["cveMetadata"]["dateUpdated"])
        elif "datePublished" in vuln["cveMetadata"]:
            updated = fromisoformat_wrapper(vuln["cveMetadata"]["datePublished"])
        elif "dateReserved" in vuln["cveMetadata"]:
            updated = fromisoformat_wrapper(vuln["cveMetadata"]["dateReserved"])
        else:
            updated = datetime.now()
        ids[vuln_id] = updated.timestamp()

        # Add information about the updater in the cveMetadata field
        if "history" not in vuln["cveMetadata"]:
            vuln["cveMetadata"]["vulnerabilitylookup_history"] = [
                (current_user.email, datetime.now().strftime("%Y-%m-%dT%H:%M:%S.%fZ"))
            ]
        else:
            vuln["cveMetadata"]["vulnerabilitylookup_history"].append(
                (current_user.login, datetime.now().strftime("%Y-%m-%dT%H:%M:%S.%fZ"))
            )

        # Store the vulnerability in kvrocks
        p = storage.pipeline()
        p.set(vuln_id, orjson.dumps(vuln))
        p.zadd(f"index:{source}", ids)  # type: ignore
        p.zadd("index", ids)  # type: ignore
        p.hset("last_updates", mapping={source: updated.isoformat()})
        p.execute()

        return vuln, 200


@default_ns.route("redis_up")
@default_ns.doc(description="Check if redis is up and running")
class RedisUp(Resource):  # type: ignore[misc]
    def get(self) -> bool:
        return vulnerabilitylookup.check_redis_up()


@api_ns.route("/dbInfo")
@default_ns.route("info")
@api_ns.doc(
    description="Get more information about the current databases in use and when it was updated"
)
class Info(Resource):  # type: ignore[misc]
    def get(self) -> dict[str, Any]:
        return vulnerabilitylookup.get_info()


@api_ns.route("/last")
@default_ns.route("last")
@default_ns.route("last/<int:number>")
@default_ns.route("last/<string:source>")
@default_ns.route("last/<string:source>/<int:number>")
@default_ns.doc(description="Get the last CVEs")
class Last(Resource):  # type: ignore[misc]
    def get(
        self, source: str | None = None, number: int | None = 30
    ) -> list[dict[str, Any]]:
        return [entry for v_id, entry in vulnerabilitylookup.get_last(source, number)]


@api_ns.route("/browse")
@default_ns.doc(description="Get the known vendors")
class Vendors(Resource):  # type: ignore[misc]
    def get(self) -> list[str]:
        return list(vulnerabilitylookup.get_vendors())


@api_ns.route("/browse/<string:vendor>")
@api_ns.doc(description="Get the known products for a vendor")
class VendorProducts(Resource):  # type: ignore[misc]
    def get(self, vendor: str) -> list[str]:
        return list(vulnerabilitylookup.get_vendor_products(vendor))


@api_ns.route("/search/<string:vendor>/<string:product>")
@api_ns.doc(description="Get the the vulnerabilities per vendor and a specific product")
class VendorProductVulnerabilities(Resource):  # type: ignore[misc]
    def get(
        self, vendor: str, product: str
    ) -> dict[str, list[tuple[str, dict[str, Any]]]]:
        return vulnerabilitylookup.get_vendor_product_vulnerabilities(vendor, product)
