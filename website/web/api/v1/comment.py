from typing import Any
from typing import Dict
from typing import Tuple

from flask_restx import Namespace
from flask_restx import reqparse
from flask_restx import Resource

from website.web.api.v1.common import auth_func
from website.web.permissions import admin_permission, commenter_permission

comment_ns = Namespace("comment", description="comment related operations")

# Argument Parsing
parser = reqparse.RequestParser()
parser.add_argument("vuln_id", type=str, help="ID of the vulnerability.")


@comment_ns.route("/comment/<string:comment_id>")
class Comment(Resource):  # type: ignore[misc]
    @comment_ns.doc(description="Get a comment.")  # type: ignore[misc]
    def get(self, comment_id: str) -> dict[str, Any] | None:
        return {}, 200

    @comment_ns.doc(description="Delete a cooment.")  # type: ignore[misc]
    @admin_permission.require(http_exception=403)  # type: ignore[misc]
    @auth_func
    def delete(self, comment_id: str) -> Tuple[dict[Any, Any], int]:
        """Endpoint for deleting a comment."""
        return {}, 204

@comment_ns.route("/comment/")
class CommentsList(Resource):  # type: ignore[misc]

    @comment_ns.doc("list_comments")
    @comment_ns.expect(parser)
    def get(self) -> Tuple[Dict[Any, Any], int]:
        """List all comments."""
        args = parser.parse_args()
        vuln_id = args.pop("vuln_id", None)


        result = {}
        return result, 200
