#!/usr/bin/env python3

from datetime import timezone
from feedgen.feed import FeedGenerator  # type: ignore[import-untyped]
from flask import (
    Blueprint,
    request,
    render_template,
    make_response,
    Response,
)
from flask_paginate import get_page_args  # type: ignore[import-untyped]

from vulnerabilitylookup.default import get_config
from website.models import Comment
from website.web.bootstrap import db

comment_bp = Blueprint(
    "comment_bp", __name__, url_prefix="/comment", template_folder="comments"
)
comments_bp = Blueprint(
    "comments_bp", __name__, url_prefix="/comments", template_folder="comments"
)

local_instance_name = get_config("generic", "local_instance_name").lower()


@comments_bp.route("/", methods=["GET"])
def list_comments() -> str:
    return render_template("comments/comments.html")


@comments_bp.route(
    "/feed.<string:format>", defaults={"per_page": "10"}, methods=["GET"]
)
def feed_comments(per_page: int = 10, format: str = "atom") -> Response:
    vulnerability = request.args.get("vulnerability", "")
    public_domain = get_config("generic", "public_domain")
    fg = FeedGenerator()
    fg.id(f"https://{public_domain}/comment/feed")
    fg.title(f"Most recent comment.")
    fg.author({"name": "Vulnerability Lookup"})
    fg.link(href=f"https://{public_domain}", rel="alternate")
    fg.subtitle(f"Contains only the most {per_page} recent comments.")
    fg.language("en")

    query = Comment.query.filter(Comment.is_published == True)
    if vulnerability:
        query = query.filter(Comment.vulnerability.ilike("%" + vulnerability + "%"))
    query = query.order_by(Comment.timestamp.desc())

    _, per_page, offset = get_page_args(
        page_parameter="page", per_page_parameter="per_page"
    )
    comments = query.offset(offset).limit(per_page)

    for comment in comments:
        fe = fg.add_entry()
        fe.id(f"https://{public_domain}/vuln/{comment.vulnerability}")
        fe.title(comment.title)
        fe.link(href=f"https://{public_domain}/vuln/{comment.vulnerability}")
        fe.content(comment.description)
        fe.description(comment.description)
        fe.published(comment.timestamp.replace(tzinfo=timezone.utc))
    if format == "atom":
        feed = fg.atom_str(pretty=True)
    else:
        feed = make_response(fg.rss_str(pretty=True))
        feed.mimetype = "application/rss+xml"
        feed.headers["Content-Type"] = "application/rss+xml"
    return feed
