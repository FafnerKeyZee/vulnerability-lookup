#!/usr/bin/env python3

import logging
import logging.config

from importlib.metadata import version
from typing import Optional

from flask import Flask, request, render_template, flash
from flask_bootstrap import Bootstrap5  # type: ignore
from flask_restx import Api, Resource  # type: ignore

from vulnerabilitylookup.vulnerabilitylookup import VulnerabilityLookup

from vulnerabilitylookup.default import get_config

from .helpers import get_secret_key, sri_load
from .proxied import ReverseProxied

logging.config.dictConfig(get_config('logging'))

app: Flask = Flask(__name__)

app.wsgi_app = ReverseProxied(app.wsgi_app)  # type: ignore

app.config['SECRET_KEY'] = get_secret_key()
Bootstrap5(app)
app.config['SESSION_COOKIE_NAME'] = 'vulnerability-lookup'
app.config['SESSION_COOKIE_SAMESITE'] = 'Strict'
app.debug = False

vulnerabilitylookup: VulnerabilityLookup = VulnerabilityLookup()


# ##### Global methods passed to jinja

def get_sri(directory: str, filename: str) -> str:
    sha512 = sri_load()[directory][filename]
    return f'sha512-{sha512}'


app.jinja_env.globals.update(get_sri=get_sri)

# #### Web interface ####


@app.route('/', methods=['GET', 'POST'])
@app.route('/search', methods=['GET', 'POST'])
def index():
    if request.method == 'HEAD':
        # Just returns ack if the webserver is running
        return 'Ack'
    if request.method == 'POST':
        vulnerability_id = None
        product = None
        vendor = None
        # trigger search
        if search_query := request.form.get('freetext_search'):  # Normal search
            vulnerability_id = search_query
        elif search_query := request.form.get('vendor_vuln'):  # Vuln id search from vendor
            vulnerability_id = search_query
            vendor = request.form.get('vendor')  # This one must exist
        elif search_query := request.form.get('product'):  # Search for all vulns related to this vendor and product
            product = search_query
            vendor = request.form.get('vendor')  # This one must exist

        if vulnerability_id:
            if vulnerability := vulnerabilitylookup.get_vulnerability(vulnerability_id):
                # The search query was a vulnerability ID, just display that.
                source = vulnerabilitylookup.get_vulnerability_source(vulnerability_id)
                if linked_vulns := vulnerabilitylookup.get_linked_vulnerabilities(vulnerability_id):
                    return render_template('search.html', source=source, vulnerability_id=vulnerability_id, vulnerability_data=vulnerability, linked_vulns=linked_vulns)

                return render_template('search.html', source=source, vulnerability_id=vulnerability_id, vulnerability_data=vulnerability)

            elif linked_vulns := vulnerabilitylookup.get_linked_vulnerabilities(vulnerability_id):
                return render_template('search.html', vulnerability_id=vulnerability_id, linked_vulns=linked_vulns)
            elif vulnerability_id in vulnerabilitylookup.get_vendors():
                vendor = vulnerability_id
                # Got a vendor, show the proper template.
                vendor_products = vulnerabilitylookup.get_vendor_products(vendor)
                vendor_vulns = vulnerabilitylookup.get_vendor_vulnerabilities(vendor)
                return render_template('search.html', vendor=vendor, vendor_products=vendor_products, vendor_vulns=vendor_vulns)
            flash(f'Nothing found in the database for {vulnerability_id}.', 'warning')
        elif vendor and product:
            vulnerabilities = vulnerabilitylookup.get_vendor_product_vulnerabilities(vendor, product)
            return render_template('search.html', vendor=vendor, product=product, vp_vulnerabilities=vulnerabilities)
        else:
            # not enough info
            pass

    # render search page
    return render_template('search.html')


# #### API ####

api = Api(app, title='VulnerabilityLookup API',
          description='API to query VulnerabilityLookup.',
          version=version('vulnerabilitylookup'),
          doc='/doc')


@api.route('/redis_up')
@api.doc(description='Check if redis is up and running')
class RedisUp(Resource):

    def get(self):
        return vulnerabilitylookup.check_redis_up()


@api.route('/api/cve/<string:vulnerability_id>')
@api.route('/vulnerability/<string:vulnerability_id>')
@api.doc(description='Get a vulnerability')
class Vulnerability(Resource):

    def get(self, vulnerability_id: str):
        return vulnerabilitylookup.get_vulnerability(vulnerability_id)


@api.route('/api/dbInfo')
@api.route('/info')
@api.doc(description='Get more information about the current databases in use and when it was updated')
class Info(Resource):

    def get(self):
        return vulnerabilitylookup.get_info()


@api.route('/api/last')
@api.route('/last')
@api.route('/last/<int:number>')
@api.route('/last/<string:source>')
@api.route('/last/<string:source>/<int:number>')
@api.doc(description='Get the last CVEs')
class Last(Resource):

    def get(self, source: Optional[str]=None, number: Optional[int]=30):
        return vulnerabilitylookup.get_last(source, number)


@api.route('/api/browse')
@api.doc(description='Get the known vendors')
class Vendors(Resource):

    def get(self):
        return list(vulnerabilitylookup.get_vendors())


@api.route('/api/browse/<string:vendor>')
@api.doc(description='Get the known products for a vendor')
class VendorProducts(Resource):

    def get(self, vendor: str):
        return list(vulnerabilitylookup.get_vendor_products(vendor))


@api.route('/api/search/<string:vendor>/<string:product>')
@api.doc(description='Get the the vulnerabilities per vendor and a specific product')
class VendorProductVulnerabilities(Resource):

    def get(self, vendor: str, product: str):
        return vulnerabilitylookup.get_vendor_product_vulnerabilities(vendor, product)
