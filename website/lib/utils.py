from typing import Any

import json
import os
import jsonschema  # type: ignore[import-untyped]
from pathlib import Path
from referencing import Registry, Resource
from referencing.jsonschema import DRAFT202012
from referencing.jsonschema import SchemaRegistry

from jsonschema import Draft202012Validator
from jsonschema import Draft4Validator


from website import BASE_DIR

# #### CVE Record Format - CVE List V5 ####

schema_cve5 = json.load(open(os.path.join(BASE_DIR, "website", "web", "static", "schemas", "CVE_Record_Format.json")))
reference_tags = json.load(open(os.path.join(BASE_DIR, "website", "web", "static", "schemas", "tags", "reference-tags.json")))
cna_tags = json.load(open(os.path.join(BASE_DIR, "website", "web", "static", "schemas", "tags", "cna-tags.json")))
adp_tags = json.load(open(os.path.join(BASE_DIR, "website", "web", "static", "schemas", "tags", "adp-tags.json")))
cvss_4_tags = json.load(open(os.path.join(BASE_DIR, "website", "web", "static", "schemas", "imports", "cvss", "cvss-v4.0.json")))
cvss_3_tags = json.load(open(os.path.join(BASE_DIR, "website", "web", "static", "schemas", "imports", "cvss", "cvss-v3.1.json")))

registry_cve5: SchemaRegistry = Registry().with_resources(
    [
        ("file:tags/adp-tags.json", Resource.from_contents(adp_tags)),
        ("file:tags/cna-tags.json",  Resource.from_contents(cna_tags)),
        ("file:tags/reference-tags.json", Resource.from_contents(reference_tags)),
        ("file:imports/cvss/cvss-v4.0.json", Resource.from_contents(cvss_4_tags)),
        ("file:imports/cvss/cvss-v3.1.json", Resource.from_contents(cvss_3_tags)),
    ],
)
validator_cve5 = Draft202012Validator(schema_cve5, registry=registry_cve5)


def validate_json(data: Any, format: str = "cve5") -> None:
    """Checks the format of a JSON object against a JSON schema.
    Currently only CVE version 5."""
    try:
        globals()["validator_"+format].validate(data)
    except jsonschema.exceptions.ValidationError as e:
        v = Draft4Validator(globals()["schema_"+format])
        errors = sorted(v.iter_errors(data), key=lambda e: e.path)
        for error in errors:
            print("Record did not pass: \n")
            print(str(error.message) + "\n")
        raise e
