#!/usr/bin/env python3

import json
import logging

from typing import Optional, Any, Dict

from redis import ConnectionPool, Redis
from redis.connection import UnixDomainSocketConnection

from .default import get_config, get_socket_path


class VulnerabilityLookup():

    def __init__(self) -> None:
        self.logger = logging.getLogger(f'{self.__class__.__name__}')
        self.logger.setLevel(get_config('generic', 'loglevel'))

        self.redis_pool: ConnectionPool = ConnectionPool(connection_class=UnixDomainSocketConnection,
                                                         path=get_socket_path('cache'), decode_responses=True)

        self.redis_pool_storage: ConnectionPool = ConnectionPool(
            host=get_config('generic', 'storage_db_hostname'),
            port=get_config('generic', 'storage_db_port'),
            decode_responses=True)

    @property
    def storage(self):
        return Redis(connection_pool=self.redis_pool_storage)

    @property
    def redis(self):
        return Redis(connection_pool=self.redis_pool)

    def check_redis_up(self):
        return self.redis.ping()

    def get_vulnerability(self, vulnerability_id) -> Optional[Dict[str, Any]]:
        _vuln = self.storage.get(vulnerability_id)
        if _vuln:
            return json.loads(_vuln)
        return None
