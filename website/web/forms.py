#!/usr/bin/env python3

from urllib.parse import urlparse

from flask import current_app
from flask import request
from flask_wtf import FlaskForm
from werkzeug.exceptions import HTTPException
from werkzeug.exceptions import NotFound
from wtforms import BooleanField
from wtforms import HiddenField
from wtforms import PasswordField
from wtforms import StringField
from wtforms import SubmitField
from wtforms import validators
from wtforms.fields import EmailField
from wtforms.validators import Email
from wtforms.validators import InputRequired

from website.models import User


class RedirectForm(FlaskForm):
    """Redirect form used for the redirection after the sign in."""

    next = HiddenField()

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if not self.next.data:
            # self.next.data = request.args.get("next") or request.referrer
            self.next.data = request.args.get("next") or "/user/profile"
        try:
            ref_url = urlparse(self.next.data)
            if ref_url.path == "/":
                self.next.data = "/user/profile"
            else:
                # Will raise an exception if no endpoint exists for the url
                adapter = current_app.create_url_adapter(request)
                adapter.match(ref_url.path)  # type: ignore
        except NotFound:
            self.next.data = "/user/profile"
        except HTTPException:
            # Any other exceptions
            pass

    @property
    def redirect_target(self):
        return self.next.data


class LoginForm(RedirectForm):
    """Sign in form."""

    login = StringField(
        "Login",
        [
            validators.Length(min=3, max=50),
            validators.InputRequired("Please enter your login."),
        ],
    )
    password = PasswordField(
        "Password",
        [
            validators.InputRequired("Please enter your password."),
            validators.Length(min=6, max=500),
        ],
    )
    submit = SubmitField("Log In")

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.user = None

    def validate(self):
        validated = super().validate()
        user = User.query.filter(User.login == self.login.data).first()
        if not user:
            validated = False
        else:
            if not user.is_active:
                validated = False
            if not user.check_password(self.password.data):
                validated = False
            self.user = user
        if not validated:
            # intentionaly do not explain why it is impossible to login
            self.login.errors.append("Impossible to login.")
        return validated


class ProfileForm(FlaskForm):
    """Edit a profile."""

    login = StringField(
        "Login",
        [
            validators.Length(min=3, max=30),
            validators.InputRequired("Please enter your login."),
        ],
    )
    password = PasswordField(
        "Password",
        [
            validators.InputRequired("Please enter your password."),
            validators.Length(min=20, max=500),
        ],
    )
    email = EmailField(
        "Email",
        [
            InputRequired("Please enter your email address."),
            Email("Please enter your email address."),
        ],
    )
    submit = SubmitField("Save")
