#!/usr/bin/env python3

from __future__ import annotations

import logging
import logging.config
import os
import time

from abc import ABC, abstractmethod
from pathlib import Path
from subprocess import Popen

from git import Repo
import orjson
from redis import Redis

from ..default import get_config, get_homedir
from ..helpers import get_config_feeder


class AbstractFeeder(ABC):

    def __init__(self, feeder_name: str):
        self.name = feeder_name
        self._load_logging_config()
        self.logger = logging.getLogger(f'{self.__class__.__name__}')

        self.config = get_config_feeder(self.name)
        if 'level' in self.config:
            self.logger.setLevel(self.config['level'])
        else:
            self.logger.setLevel(get_config('generic', 'loglevel'))

        self.storage = Redis(host=get_config('generic', 'storage_db_hostname'),
                             port=get_config('generic', 'storage_db_port'))

    def _load_logging_config(self) -> None:
        cur_path = Path(__file__)
        if not (cur_path.parent / f'{self.name}_logging.json').exists():
            return
        with (cur_path.parent / f'{self.name}_logging.json').open() as f:
            log_config = orjson.loads(f.read())
        logging.config.dictConfig(log_config)

    def init_git_repo(self) -> None:
        root_repo = Repo(get_homedir())
        root_repo.submodule(self.name).update(init=True)

        self.path_to_repo = get_homedir() / 'vulnerabilitylookup' / 'feeders' / self.name
        self.git = Repo(self.path_to_repo)

    def init_csaf_repo(self) -> None:
        csaf_downloader = get_config('generic', 'csaf_downloader_path')
        if not csaf_downloader or not os.path.exists(csaf_downloader):
            self.logger.error('A CSAF downloader is required for this feeder')
            raise FileNotFoundError('CSAF downloader not found')

        self.path_to_repo = get_homedir() / 'vulnerabilitylookup' / 'feeders' / self.name
        if not self.path_to_repo.exists():
            self.pull_csaf_repo()

    def pull_csaf_repo(self, last_update: str | None = None) -> None:
        csaf_downloader = get_config('generic', 'csaf_downloader_path')
        if not csaf_downloader or not os.path.exists(csaf_downloader):
            self.logger.error('A CSAF downloader is required for this feeder')
            raise FileNotFoundError('CSAF downloader not found')

        if not hasattr(self, 'csaf_domain'):
            self.logger.error('A domain is required for this feeder')
            raise Exception('Domain to find a CSAF reposorory missing.')

        to_run = [csaf_downloader, '-d', self.path_to_repo]
        if last_update:
            to_run.append('-t')
            to_run.append(last_update)
        to_run.append(self.csaf_domain)
        with Popen(to_run) as process:
            self.logger.info('Downloading CSAF data.')
            while process.poll() is None:
                if last_update:
                    self.logger.info(f'Downloading CSAF data since {last_update}')
                else:
                    self.logger.info('Still dwnloading CSAF data...')
                time.sleep(10)
            self.logger.info('Downloading CSAF data finished')

    @abstractmethod
    def update(self) -> bool:
        ...
