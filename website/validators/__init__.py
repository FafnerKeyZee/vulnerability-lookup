#!/usr/bin/env python3

from typing import Any

import glob
import importlib.util
import sys
from os.path import dirname, basename, isfile, join

import jsonschema  # type: ignore[import-untyped]


def load_module(source, module_name=""):
    """
    Reads file source and loads it as a module

    :param source: file to load
    :param module_name: name of module to register in sys.modules
    :return: loaded module
    """
    spec = importlib.util.spec_from_file_location(module_name, source)
    module = importlib.util.module_from_spec(spec)
    sys.modules[module_name] = module
    spec.loader.exec_module(module)
    return module


modules = glob.glob(join(dirname(__file__), "*.py"))

# Load the validators for the different modules found in the directory
validators = {
    basename(f)[:-3]: load_module(f).validator
    for f in modules
    if isfile(f) and not f.endswith("__init__.py")
}


def validate_json(data: Any, format: str = "circl") -> None:
    """Checks the format of a JSON object against a JSON schema."""
    try:
        validators[format].validate(data)
    except jsonschema.exceptions.ValidationError:
        errors = sorted(validators[format].iter_errors(data), key=lambda e: e.path)
        for error in errors:
            print("Record did not pass: \n")
            print(str(error.message) + "\n")
        raise
