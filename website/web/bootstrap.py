#!/usr/bin/env python3

import hashlib
import logging
import logging.config
import os
from datetime import datetime
from flask import Flask
from flask_bootstrap import Bootstrap5  # type: ignore[import-untyped]
from flask_migrate import Migrate  # type: ignore[import-untyped]
from flask_sqlalchemy import SQLAlchemy
from logging.config import dictConfig

from vulnerabilitylookup.default import get_config
from vulnerabilitylookup.vulnerabilitylookup import VulnerabilityLookup
from website import BASE_DIR
from website.web.helpers import sri_load

from .helpers import get_secret_key
from .proxied import ReverseProxied


def set_logging(
    log_path: str = "",
    log_level: int = logging.INFO,
    modules: list[str] = [],
    log_format: str = "%(asctime)s %(name)s %(levelname)s %(message)s",
) -> None:
    if not modules:
        modules = ["root", "website"]
    if log_path:
        handler: logging.Handler = logging.FileHandler(log_path)
    else:
        handler = logging.StreamHandler()
    formater = logging.Formatter(log_format)
    handler.setFormatter(formater)
    for logger_name in modules:
        logger = logging.getLogger(logger_name)
        logger.addHandler(handler)
        for handler in logger.handlers:
            handler.setLevel(log_level)
        logger.setLevel(log_level)


application: Flask = Flask(__name__)

application.wsgi_app = ReverseProxied(application.wsgi_app)  # type: ignore

application.config["SECRET_KEY"] = get_secret_key()
application.config.from_pyfile(
    os.path.join(BASE_DIR, "config", "website.py"), silent=False
)

set_logging(application.config["LOG_PATH"], log_level=application.config["LOG_LEVEL"])

Bootstrap5(application)

db = SQLAlchemy(application)
migrate = Migrate(application, db, directory="website/migrations")

vulnerabilitylookup: VulnerabilityLookup = VulnerabilityLookup()  # type: ignore[unused-ignore]


# ##### Global methods passed to jinja


def get_sri(directory: str, filename: str) -> str:
    sha512 = sri_load()[directory][filename]
    return f"sha512-{sha512}"


application.jinja_env.globals.update(get_sri=get_sri)


# ##### Jinja custom filters


def datetimeformat(value: datetime, format: str = "%Y-%m-%d %H:%M") -> str:
    return value.strftime(format)


def hash(value: str) -> str:
    m = hashlib.sha256()
    m.update(value.encode())
    return m.hexdigest()


application.jinja_env.filters["datetimeformat"] = datetimeformat
application.jinja_env.filters["hash"] = hash
