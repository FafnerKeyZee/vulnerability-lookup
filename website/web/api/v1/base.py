from typing import Any

from flask import request
from flask_restx import Namespace  # type: ignore[import-untyped]
from flask_restx import Api, Resource  # type: ignore[import-untyped]

from website.web.bootstrap import vulnerabilitylookup

api_ns = Namespace("api", description="core API operations")
default_ns = Namespace("default", description="default operations")



@api_ns.route('/cve/<string:vulnerability_id>')
@default_ns.route('vulnerability/<string:vulnerability_id>')
@api_ns.doc(description='Get a vulnerability')
class Vulnerability(Resource):  # type: ignore[misc]

    def get(self, vulnerability_id: str) -> dict[str, Any] | None:
        with_meta = True if request.args.get('with_meta') else False
        return vulnerabilitylookup.get_vulnerability(vulnerability_id, with_meta=with_meta)


@default_ns.route('redis_up')
@default_ns.doc(description='Check if redis is up and running')
class RedisUp(Resource):  # type: ignore[misc]

    def get(self) -> bool:
        return vulnerabilitylookup.check_redis_up()


@api_ns.route('/dbInfo')
@default_ns.route('info')
@api_ns.doc(description='Get more information about the current databases in use and when it was updated')
class Info(Resource):  # type: ignore[misc]

    def get(self) -> dict[str, Any]:
        return vulnerabilitylookup.get_info()


@api_ns.route('/last')
@default_ns.route('last')
@default_ns.route('last/<int:number>')
@default_ns.route('last/<string:source>')
@default_ns.route('last/<string:source>/<int:number>')
@default_ns.doc(description='Get the last CVEs')
class Last(Resource):  # type: ignore[misc]

    def get(self, source: str | None=None, number: int | None=30) -> list[dict[str, Any]]:
        return [entry for v_id, entry in vulnerabilitylookup.get_last(source, number)]


@api_ns.route('/browse')
@default_ns.doc(description='Get the known vendors')
class Vendors(Resource):  # type: ignore[misc]

    def get(self) -> list[str]:
        return list(vulnerabilitylookup.get_vendors())


@api_ns.route('/browse/<string:vendor>')
@api_ns.doc(description='Get the known products for a vendor')
class VendorProducts(Resource):  # type: ignore[misc]

    def get(self, vendor: str) -> list[str]:
        return list(vulnerabilitylookup.get_vendor_products(vendor))


@api_ns.route('/search/<string:vendor>/<string:product>')
@api_ns.doc(description='Get the the vulnerabilities per vendor and a specific product')
class VendorProductVulnerabilities(Resource):  # type: ignore[misc]

    def get(self, vendor: str, product: str) -> dict[str, list[tuple[str, dict[str, Any]]]]:
        return vulnerabilitylookup.get_vendor_product_vulnerabilities(vendor, product)
