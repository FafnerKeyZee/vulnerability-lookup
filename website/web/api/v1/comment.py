from typing import Any
from typing import Dict
from typing import Tuple
from datetime import datetime

import logging
from flask_login import current_user  # type: ignore[import-untyped]
from flask_restx import fields
from flask_restx import abort  # type: ignore[import-untyped]
from flask_restx import Namespace
from flask_restx import reqparse
from flask_restx import Resource

from vulnerabilitylookup.default import get_config
from website.web.bootstrap import db
from website.validators import validate_json
from website.web.api.v1.common import auth_func
from website.web.api.v1.common import uuid_type
from website.web.api.v1.types import ResultType
from website.models import Comment
from website.web.permissions import admin_permission, commenter_permission

logger = logging.getLogger(__name__)

comment_ns = Namespace("comment", description="comment related operations")

local_instance_uuid = get_config("generic", "local_instance_uuid").lower()

# Argument Parsing
parser = reqparse.RequestParser()
parser.add_argument("uuid", type=uuid_type, help="UUID of the comment.")
parser.add_argument("title", type=str, help="ID of the comment.")
parser.add_argument("description", type=str, help="Description of the comment.")
parser.add_argument(
    "description_format", type=str, help="Format of thje comment (markdown or text)."
)
parser.add_argument(
    "vulnerability", type=str, help="Vulnerability related to the comment."
)
parser.add_argument("creation_timestamp", type=datetime, help="Creation timestamp.")
parser.add_argument("timestamp", type=datetime, help="Update timestamp.")

# Response marshalling
metada_params_model = {
    "count": fields.String(
        readonly=True, description="Total number of the items of the data."
    ),
    "offset": fields.String(
        readonly=True,
        description="Position of the first element of the data from the total data amount.",
    ),
    "limit": fields.String(readonly=True, description="Requested limit data."),
}

comment_params_model = {
    "uuid": fields.String(description="Comment id."),
    "vulnerability_lookup_origin": fields.String(
        description="Comment id.", readonly=True, default=local_instance_uuid
    ),
    "title": fields.String(description="Comment id."),
    "description": fields.String(description="Comment id."),
    "description_format": fields.String(description="Comment id."),
    "vulnerability": fields.String(description="Comment id."),
    "creation_timestamp": fields.DateTime(
        description="Updated time of the comment.", readonly=True
    ),
    "timestamp": fields.DateTime(
        description="Updated time of the comment.", readonly=True
    ),
    "related_vulnerabilities": fields.List(
        fields.String,
        description="One or more vulnerability references (CVE ID, GHSA-ID, PYSEC ID, etc.) for this comment.",
    ),
    "meta": fields.Raw(description="Zero or more meta-fields."),
}
comment = comment_ns.model("Comment", comment_params_model)
metadata = comment_ns.model("metadata", metada_params_model)

comment_list_fields = comment_ns.model(
    "CommentsList",
    {
        "metadata": fields.Nested(
            metadata, description="Metada related to the result."
        ),
        "data": fields.List(
            fields.Nested(comment, skip_none=True), description="List of comments."
        ),
    },
)


@comment_ns.route("/comment/<string:comment_uuid>")
class CommentItem(Resource):  # type: ignore[misc]
    @comment_ns.doc(description="Get a comment.")  # type: ignore[misc]
    @comment_ns.marshal_list_with(comment_list_fields)  # type: ignore[misc]
    def get(self, comment_uuid: str) -> Tuple[dict[str, str], int]:
        results = Comment.query.filter(
            Comment.is_published == True, Comment.uuid == comment_uuid
        )
        result: ResultType = {
            "data": results.all(),
            "metadata": {
                "count": results.count(),
                "offset": 0,
                "limit": 10,
            },
        }
        return result, 200

    @comment_ns.doc(description="Delete a comment.")  # type: ignore[misc]
    @admin_permission.require(http_exception=403)  # type: ignore[misc]
    @auth_func
    def delete(self, comment_uuid: str) -> Tuple[dict[Any, Any], int]:
        """Endpoint for deleting a comment."""
        obj = Comment.query.filter(Comment.uuid == comment_uuid).first()
        if obj:
            if not current_user.is_admin and current_user.id != obj.author_id:
                return abort(403, "You cannot delete this comment.")
            db.session.delete(obj)
            db.session.commit()
        return {}, 204


@comment_ns.route("/comment/")
class CommentsList(Resource):  # type: ignore[misc]
    @comment_ns.doc("list_comments")  # type: ignore[misc]
    @comment_ns.expect(parser)  # type: ignore[misc]
    @comment_ns.marshal_list_with(comment_list_fields)  # type: ignore[misc]
    def get(self) -> Tuple[Dict[Any, Any], int]:
        """List all comments."""
        args = parser.parse_args()
        offset = args.pop("page", 1) - 1
        limit = args.pop("per_page", 10)
        vuln_id = args.pop("vulnerability", None)

        result: ResultType = {
            "data": [],
            "metadata": {
                "count": 0,
                "offset": offset,
                "limit": limit,
            },
        }

        results = []
        count = 0
        query = Comment.query
        query = query.filter(Comment.is_published == True)
        if vuln_id is not None:
            query = query.filter(Comment.vulnerability.ilike("%" + vuln_id + "%"))

        query = query.order_by(Comment.timestamp.desc())
        total = query.count()
        query = query.limit(limit)
        results = query.offset(offset * limit)
        count = total

        result["data"] = results
        result["metadata"]["count"] = count

        return result, 200

    @comment_ns.doc(description="Create a comment related to a security advisory.")  # type: ignore[misc]
    @comment_ns.doc(
        responses={
            201: "Success.",
            400: "JSON validation failed.",
            403: "Commenter permission required.",
        }
    )  # type: ignore[misc]
    @comment_ns.expect(comment)
    @comment_ns.marshal_list_with(comment_list_fields, code=201)
    @commenter_permission.require(http_exception=403)  # type: ignore[misc]
    @auth_func
    def post(self) -> Tuple[Dict[Any, Any], int]:
        """Create a new comment related to a security advisory (vulnerability)."""
        # Validate the JSON payloadi
        current_time = datetime.now()
        comment = comment_ns.payload
        comment["vulnerability_lookup_origin"] = local_instance_uuid
        comment["creation_timestamp"] = current_time.strftime("%Y-%m-%dT%H:%M:%S.%fZ")
        comment["timestamp"] = current_time.strftime("%Y-%m-%dT%H:%M:%S.%fZ")
        print(comment)
        try:
            validate_json(comment, "circl_comment")
        except Exception:
            logger.warning("JSON validation failed.")
            abort(400, "JSON validation failed.")

        new_comment = Comment(
            **comment,
            is_published=True if current_user.is_admin else False,
            author_id=current_user.id,
        )
        db.session.add(new_comment)
        db.session.commit()

        return comment, 201
