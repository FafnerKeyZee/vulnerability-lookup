import json
import os
from referencing import Registry, Resource
from referencing.jsonschema import SchemaRegistry

from jsonschema import Draft202012Validator  # type: ignore[import-untyped]

from website import BASE_DIR

# #### CIRCL Security Advisory record format (based on CVE List V5) ####

path_circl = os.path.join(BASE_DIR, "website", "web", "static", "schemas", "CIRCL")

schema_cve5 = json.load(open(os.path.join(path_circl, "CVE_Record_Format.json")))
reference_tags = json.load(
    open(
        os.path.join(
            path_circl,
            "tags",
            "reference-tags.json",
        )
    )
)
cna_tags = json.load(open(os.path.join(path_circl, "tags", "cna-tags.json")))
adp_tags = json.load(open(os.path.join(path_circl, "tags", "adp-tags.json")))
cvss_4_tags = json.load(
    open(
        os.path.join(
            path_circl,
            "imports",
            "cvss",
            "cvss-v4.0.json",
        )
    )
)
cvss_3_tags = json.load(
    open(
        os.path.join(
            path_circl,
            "imports",
            "cvss",
            "cvss-v3.1.json",
        )
    )
)

registry: SchemaRegistry = Registry().with_resources(
    [
        ("file:tags/adp-tags.json", Resource.from_contents(adp_tags)),
        ("file:tags/cna-tags.json", Resource.from_contents(cna_tags)),
        ("file:tags/reference-tags.json", Resource.from_contents(reference_tags)),
        ("file:imports/cvss/cvss-v4.0.json", Resource.from_contents(cvss_4_tags)),
        ("file:imports/cvss/cvss-v3.1.json", Resource.from_contents(cvss_3_tags)),
    ],
)
validator = Draft202012Validator(schema_cve5, registry=registry)
