import datetime
import json
import logging
import requests
import shelve
import time

from ..default import get_config, get_homedir, safe_create_dir
from ..helpers import get_config_feeder


class NVDFetcher():
    NVD_DATE_FORMAT = "%Y-%m-%dT%H:%M:%S"
    SLEEP_TIME = 4

    def __init__(self):
        self.config = get_config_feeder('nvd')
        self.url_api = "https://services.nvd.nist.gov/rest/json/cves/2.0/?"
        if 'apikey' in self.config:
            self.url_apikey_param = {"apiKey": self.config['apikey']}
        else:
            self.url_apikey_param = {}

        self.output_dir = get_homedir() / get_config('generic', 'output_dir') / 'cves'
        safe_create_dir(self.output_dir)
        self.states_dir = get_homedir() / get_config('generic', 'output_dir') / 'states'
        safe_create_dir(self.states_dir)
        self.state_file = self.states_dir / 'nvd.state'

    def nvd_request(self, *args, **kwargs):
        r = requests.get(*args, **kwargs, headers=self.url_apikey_param)

        if r.status_code != requests.codes.ok:
            raise Exception(f"API returning wrong HTTP error code: {r.status_code}")

        return r

    def nvd_update(self, LastUpdate=None):
        if LastUpdate is None:
            # Assuming the first CVE allocation is in 1999
            # LastUpdate = datetime.datetime(1999, 1, 1)
            query = ""
        else:
            query = "lastModStartDate={}&lastModEndDate={}".format(
                LastUpdate.strftime(self.NVD_DATE_FORMAT),
                (datetime.datetime.now() - datetime.timedelta(seconds=10)).strftime(
                    self.NVD_DATE_FORMAT
                ),
            )

        logging.debug(f'nvd_query: {query}')

        index = 0
        totalResults = None
        results_per_page = None
        max_results_per_page = 10
        with shelve.open(self.state_file, writeback=True) as state:
            if 'index' in state:
                index = state['index']
            while True:
                nvd_value = self.nvd_request(
                    f"{self.url_api}{query}&startIndex={index}&resultsPerPage={max_results_per_page}"
                ).json()
                if totalResults is None:
                    totalResults = nvd_value["totalResults"]
                    logging.debug(totalResults)
                results_per_page = int(nvd_value["resultsPerPage"])
                logging.debug(f"index:{index} totalResults:{totalResults}")
                index += results_per_page
                with (self.output_dir / f"{index}.json").open('w') as dump:
                    dump.write(json.dumps(nvd_value))
                state['index'] = index
                state.sync()
                if results_per_page < max_results_per_page:
                    break
                # Debug, break anyway
                break
            # time.sleep(self.SLEEP_TIME)

        return True
